@page "/"
@page "/clientbank1c8"
@page "/bankservicefor1c8/clientbank1c8"
@using System.IO
@using BankServiceFor1C8.Models
@using Sabatex.BankStatementHelper
@using sabatex.Extensions.ClassExtensions
@using System.ComponentModel.DataAnnotations
@using System.Reflection



@inject IJSRuntime JSRuntime


<h2>Обробка банківських виписок</h2>
<p>
    Дана програма призначена для перетворення виписок клієнтбанків (iFobs, iBank 2 UA, ПриватБанк, УКРГАЗБанк) України в формат придатний для завантаження програмами 1с8.х
</p>
<MudExpansionPanels>
    <MudExpansionPanel Text="Протестовано для конфігурацій:">
    <ul>
         <li>Бухгалтерія Для України 2</li>
         <li>Управління нашою фірмою 1.6</li>
         <li>Управління торговим підприємством</li>
         <li>BAS Бухгалтерія</li>
         <li>BAS Corp</li>
     </ul> 

    </MudExpansionPanel>
</MudExpansionPanels>

<RadzenRadioButtonList @bind-Value="@bankType" TValue="EBankType" Orientation="Radzen.Orientation.Vertical">
    <Items>
        @{
            foreach (var eBank in stringBankPresents)
            {
                <RadzenRadioButtonListItem Text="@eBank.Value" Value=@eBank.Key />
            }
        }

    </Items>

</RadzenRadioButtonList>



<MudGrid>
    @*    <MudItem xs="12" sm="8" md="6">
         <MudRadioGroup @bind-Value="bankType" >
            <MudStack>
            @{
                foreach (var eBank in stringBankPresents)
                {
                         <MudRadio Value=eBank.Key Color="Color.Primary" Dense="true" Size="Size.Small">@eBank.Value</MudRadio>
                 }
                }
            </MudStack>
        </MudRadioGroup>
        <MudSelect T="EBankType" Label="Банківська клієнтська програма" Value="@bankType" ValueChanged="BankTypeChange">
            @foreach (var eBank in stringBankPresents)
            {
                <MudSelectItem Value=eBank.Key T="EBankType">@eBank.Value</MudSelectItem>
            }
        </MudSelect>
    </MudItem> *@
    <MudItem xs="12" sm="6" md="4" Class="ma-auto">
        <label for="uploadFiles" style="
        box-shadow: 0 2px 7px #4caf50;
        display: inline-flex;
        width: 200px;
        justify-content: space-around;
        border-radius: 2em;
        color: white;
        border:2px solid;
        cursor: pointer;
        align-items: center;
        padding:16px;
        background-color: #4caf50;">Виберіть файли<MudIcon Icon="@Icons.Filled.CloudUpload" /></label>
        <InputFile id="uploadFiles" hidden multiple OnChange="HandleSelection" />
    </MudItem>
</MudGrid>


@if (makeFiles.Count() != 0)
 {
    <MudText>Оброблено файли:</MudText>
    <MudSimpleTable>
        <thead>
            <tr>
                <th>Вхідний файл</th>
                <th>Вихідний файл</th>
                <th>Результат обробки</th>
            </tr>
        </thead> 
        <tbody>
            @foreach (var item in makeFiles)
            {
                <tr>
                    <td>@item.InputFile</td>
                    <td>@item.OutPutFile</td>
                    <td>@item.Result</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

    <MudAlert>Файли знаходяться в папці Завантаження</MudAlert>
 }

@code{
    private EBankType bankType = EBankType.iBankUA;
    string accountNumber = "";
    string error = "";
    List<ResultTask> makeFiles = new List<ResultTask>();

    private Dictionary<EBankType, string> stringBankPresents = new Dictionary<EBankType, string>
        {
            //{EBankType.iFobsUA_XML, "iFobs формат файла XML (ZIP)"},
            //{EBankType.iFobsUA_TXT, "iFobs формат файла TXT (DAT)" },
            {EBankType.iFobs,"iFobs формат вивантаження XML/TXT (XML,DAT,ZIP)" },
            {EBankType.iBankUA, "iBank формат файла ТХТ (csv)"},
            {EBankType.PrivatUA,"ПриватБанк формат файла ТХТ (csv)"},
            {EBankType.OtpBankSK,"OTP Bank Словатчина формат  файла CSV"},
            {EBankType.PrimaBankSK,"PrimaBanka Словатчина формат  файла CSV"},
            {EBankType.UkrGazBank,"УКРГАЗБАНК формат  файла CSV"},
            {EBankType.Oschad,"Ощад банк формат  файла CSV"}
        };

    async Task HandleSelection(InputFileChangeEventArgs files)
    {
        byte[] buffer = new byte[512000];
        error = "";
        makeFiles.Clear();
        var mf = new List<string>();
        foreach (var f in files.GetMultipleFiles())
        {
            var resultTask = new ResultTask
                {
                    InputFile = f.Name,
                    OutPutFile = f.Name + ".xml",
                    Result = "Ok"
                };
            try
            {
                // get coverter
                var converter = ClientBankTo1CFormatConversion.GetConvertor(bankType);
                await converter.ImportFromFileAsync(f.OpenReadStream(), Path.GetExtension(f.Name));
                if (converter.Count() > 0)
                    await JSRuntime.InvokeAsync<object>("sabatex.downloadFile", resultTask.OutPutFile, converter.GetAsXML());
                else
                    resultTask.Result = "Пропущений";

            }
            catch (Exception e)
            {
                resultTask.Result = e.Message;
            }
            makeFiles.Add(resultTask);
        }
    }

    
     void BankTypeChange(EBankType value)
     {
        bankType = value;
     }



 }
