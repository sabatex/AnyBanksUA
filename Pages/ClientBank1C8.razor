@page "/"
@page "/clientbank1c8"
@page "/bankservicefor1c8/clientbank1c8"
@using System.IO
@using BankServiceFor1C8.Models
@using sabatex.V1C8.BankHelper
@using sabatex.Extensions.ClassExtensions
@using System.ComponentModel.DataAnnotations
@using System.Reflection

@inject IJSRuntime JSRuntime

<h2>Обробка банківських виписок</h2>
<p>
    Дана програма призначена для перетворення виписок клієнтбанків (iFobs, iBank 2 UA, ПриватБанк) України в формат придатний для завантаження програмами 1с8.х
</p>
<p>
    Протестовано для конфігурацій Бухгалтерія Для України 2, Управління нашою фірмою 1.6
</p>
<MudGrid>
    <MudItem xs="12" sm="8" md="6">
        <MudSelect T="EBankType" Label="Банківська клієнтська програма" Value="@bankType" ValueChanged="BankTypeChange">
            @foreach (var eBank in stringBankPresents)
            {
                <MudSelectItem Value=eBank.Key T="EBankType">@eBank.Value</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="8" md="6">
        @switch (bankType)
        {
            case EBankType.iBankUA_TXT:
            case EBankType.iFobsUA_TXT:
            case EBankType.iFobsUA_XML:
            case EBankType.PrivatUA:
                <MudTextField @bind-Value="accountNumber" Label="Розрахунковий рахунок:" Placeholder="Не обов'язково, допомагає відфільтрувати інші рахунки." />
                break;
        }
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <label for="uploadFiles" style="
        box-shadow: 0 2px 7px #4caf50;
        display: inline-flex;
        width: 200px;
        justify-content: space-around;
        border-radius: 2em;
        color: white;
        border:2px solid;
        cursor: pointer;
        align-items: center;
        padding:16px;
        background-color: #4caf50;">Виберіть файли<MudIcon Icon="@Icons.Filled.CloudUpload" /></label>
        <InputFile id="uploadFiles" hidden multiple OnChange="HandleSelection" />
    </MudItem>
</MudGrid>


@if (makeFiles.Count() != 0)
 {
    <MudText>Оброблено файли:</MudText>
    <MudSimpleTable>
        <thead>
            <tr>
                <th>Вхідний файл</th>
                <th>Вихідний файл</th>
                <th>Результат обробки</th>
            </tr>
        </thead> 
        <tbody>
            @foreach (var item in makeFiles)
            {
                <tr>
                    <td>@item.InputFile</td>
                    <td>@item.OutPutFile</td>
                    <td>@item.Result</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

    <MudAlert>Файли знаходяться в папці Завантаження</MudAlert>
 }

 @code{
     private EBankType bankType = EBankType.iBankUA_TXT;
     string accountNumber = "";
     string error = "";
     List<ResultTask> makeFiles = new List<ResultTask>();
     
     private Dictionary<EBankType, string> stringBankPresents = new Dictionary<EBankType, string>
        {
            //{EBankType.iFobsUA_XML, "iFobs формат файла XML (ZIP)"},
            //{EBankType.iFobsUA_TXT, "iFobs формат файла TXT (DAT)" },
            {EBankType.iFobs,"iFobs формат вивантаження XML/TXT (XML,DAT,ZIP)" },
            {EBankType.iBankUA_TXT, "iBank формат файла ТХТ (csv)"},
            {EBankType.PrivatUA,"ПриватБанк формат файла ТХТ (csv)"},
            {EBankType.OtpBankSK,"OTP Bank Словатчина формат  файла CSV"},
            {EBankType.PrimaBankSK,"PrimaBanka Словатчина формат  файла CSV"},
            {EBankType.GAZBank_CSV,"УКРГАЗБАНК формат  файла CSV"}
        };

        async Task HandleSelection(InputFileChangeEventArgs files)
        {
            byte[] buffer = new byte[512000];
            error = "";
            makeFiles.Clear();
            var mf = new List<string>();
            foreach (var f in files.GetMultipleFiles())
            {
                var resultTask = new ResultTask
                {
                    InputFile = f.Name,
                    OutPutFile = f.Name + ".xml",
                    Result = "Ok"
                };

                if (bankType != EBankType.iFobs)
                {
                    try
                    {
                        using (MemoryStream memStream = new MemoryStream(512000))
                        {
                            await f.OpenReadStream().CopyToAsync(memStream);
                            memStream.Position = 0;
                            string r = _1CClientBankExchange.ConvertTo1CFormat(bankType, memStream, accountNumber);
                            await JSRuntime.InvokeAsync<object>("sabatex.downloadFile", resultTask.OutPutFile, r);
                        }
                    }
                    catch (Exception e)
                    {
                        resultTask.Result = e.Message;
                    }

                }
                else
                {
                    try { 
                        var result = (new _1CClientBankExchange()) as IiFobs;
                        await result.ImportFromFileAsync(f.OpenReadStream(), Path.GetExtension(f.Name));
                        if (result.Count() > 0)
                            await JSRuntime.InvokeAsync<object>("sabatex.downloadFile", resultTask.OutPutFile, result.GetAsXML());
                        else
                            resultTask.Result = "Пропущений";
                    }
                    catch (Exception e)
                    {
                        resultTask.Result = e.Message;
                    }
                }
                makeFiles.Add(resultTask);
            }
        }
 
    
     void BankTypeChange(EBankType value)
     {
        bankType = value;
     }



 }
